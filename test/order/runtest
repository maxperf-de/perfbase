#!/bin/sh

#
# This test verifies whether the order in which the data is inserted into the 
# database is maintained by queries. This is fragile test, and it is not 
# clear if it makes sense before we know that SQL, or PostgreSQL, make any guaranties
# on the data order. At least, we've seen that results of these queries vary 
# between PostgreSQL releases (and have take measures against false alarms, see below).
# 
# Real-world queries should better not rely on any implicit ordering, but instead 
# use a sort operator where appropiate. I.e., we've observed that a <source> returns data
# in the insert-order if 'order="keep"' is used (order_qry_1.xml). An <operator> of type 
# 'avg' changes this order then (why? CHECK).
#
if [ -z "$PB" ] ; then
    PB=../../bin/perfbase
fi
unset PB_RUNMODE

TEST_NAME="order"
N_TEST=14

if [ "$1" = "-c" ] ; then
    VERIFY=""    
    echo "*** re-creating verification data for '${TEST_NAME}'"
else
    VERIFY="yes"
    echo "*** running $N_TEST tests in '${TEST_NAME}'"
fi
if [ "$1" = "-d" ] ; then
    export PB_RUNMODE="debug"
fi

rm -f *.out *.log

if ! $PB setup -d ${TEST_NAME}_exp.xml >test.log 2>&1; then
    echo "#* ERROR in ${TEST_NAME}: could not setup experiment. See test.log"
    exit 1
fi

rc=0
t=1

# First, run the tests with a single run; then, add a second run. All queries here
# use only a single data source, ignoring the content of T.
for run in 1 2 ; do

inp_file=input_${run}.dat
if ! $PB input -d ${TEST_NAME}_inp.xml $inp_file >>test.log 2>&1; then
    echo "#* ERROR in ${TEST_NAME}: could not import $inp_file. See test.log"
    exit 1
fi

for qry_idx in 1 2 3 4 ; do
    echo "  test "$t
    CMD="$PB query -d ${TEST_NAME}_qry_${qry_idx}.xml"
    if ! $CMD  >test_${t}.out 2>&1; then
	echo "#* ERROR in ${TEST_NAME}: could not perform query (see test.log)"
	echo "   $CMD"
	rc=`expr $rc + 1`
    else
	if [ -n "$VERIFY" ] ; then
	    if ! diff test_${t}.out verify/test_${t}.vfy ; then
	       # fix: the actual output order depends on the version of PostgreSQL.
	       # Therefore, diffs are possible even if both results are correct. We
	       # do a second-level comparison with sorted files here to avoid false
	       # alerts.
	       cat test_${t}.out | sort > __out__.tmp
	       cat verify/test_${t}.vfy | sort > __vfy__.tmp
	       if ! diff __out__.tmp __vfy__.tmp ; then	    
	          echo "#* ERROR in ${TEST_NAME}: query $t returned wrong data "
		  echo "   $CMD"
		  echo "   (file ${TEST_NAME}_${t}.gp vs. verify/test_${t}.vfy)"
		  rc=`expr $rc + 1`
	       else
		   rm -f __???__.tmp test_${t}.out
	       fi
	    else
		rm test_${t}.out
	    fi
	else	
	    mv test_${t}.out verify/test_${t}.vfy
	fi
    fi
    t=`expr $t + 1`
done

done

# Now, use queries that provide two data sources instead of only one.
for qry_idx in 5 6 7 8 9 10 ; do
    echo "  test "$t
    CMD="$PB query -d ${TEST_NAME}_qry_${qry_idx}.xml"
    if ! $CMD  >test_${t}.out 2>&1; then
	echo "#* ERROR in ${TEST_NAME}: could not perform query (see test.log)"
	echo "   $CMD"
	rc=`expr $rc + 1`
    else
	if [ -n "$VERIFY" ] ; then
	    if ! diff test_${t}.out verify/test_${t}.vfy ; then
		echo "#* ERROR in ${TEST_NAME}, test $t: query returned wrong data"
		echo "   $CMD"
		echo "   (file ${TEST_NAME}_${t}.gp vs. verify/test_${t}.vfy)"
		rc=`expr $rc + 1`
	    else
		rm test_${t}.out
	    fi
	else	
	    mv test_${t}.out verify/test_${t}.vfy
	fi
    fi
    t=`expr $t + 1`
done

# clean up if not in debug mode
if [ -z "$PB_RUNMODE" ] ; then
    sleep 2
    if ! $PB delete -e ${TEST_NAME}_TEST --dontask >>test.log 2>&1; then
	echo "#* ERROR in ${TEST_NAME}: could not delete experiment. See test.log"
	exit 1
    fi
fi

if [ $rc = 0 ] ; then
    rm -f test.log 
fi

echo "*** done with tests in '${TEST_NAME}' ($rc failed)"

exit $rc
