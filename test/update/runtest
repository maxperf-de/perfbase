#!/bin/sh

unset PB_RUNMODE

if [ -z "$PB" ] ; then
    PB=../../bin/perfbase
fi
TEST_NAME="update"
N_TEST=9

if [ "$1" = "-c" ] ; then
    VERIFY=""    
    TEST_OUTPUT=verify/test_@.vfy
    echo "*** re-creating verification data for '${TEST_NAME}'"
else
    VERIFY="yes"
    TEST_OUTPUT=test_@.out
    echo "*** running $N_TEST tests in '${TEST_NAME}'"
fi
if [ "$1" = "-d" ] ; then
    export PB_RUNMODE="debug"
fi

rm -f *.out *.log *.gp

if ! $PB setup -d ${TEST_NAME}_exp.xml >test.log 2>&1; then
    echo "#* ERROR in ${TEST_NAME}: could not setup experiment. See test.log"
    exit 1
fi

rc=0
t=1
while [ $t -le 4 ] ; do
    echo "  test "$t
    echo "  test "$t >>test.log
    CMD="$PB update -d ${TEST_NAME}_upd_${t}.xml"
    OUT=`echo $TEST_OUTPUT | sed s/@/$t/`
    if ! $CMD >>test.log 2>&1 ; then
	echo "#* ERROR in ${TEST_NAME}: could not perform update $t:"
	echo "   $CMD >test_$t.out"
	echo "   (see file test.log)"
	exit 1
    fi
    if ! $PB info -e ${TEST_NAME}_TEST -v -i | grep -v Connecting | grep -v Created | grep -v Modified | grep -v admin_access > $OUT 2>>test.log; then
	echo "#* ERROR in ${TEST_NAME}: could not perform test $t:"
	echo "   $PB info -e ${TEST_NAME}_TEST -v -i > $OUT"
	echo "   (see file test.log and $OUT)"
	rc=`expr $rc + 1`
    else
	$PB info -e ${TEST_NAME}_TEST -v --val= >> $OUT 2>>test.log
	if [ -n "$VERIFY" ] ; then
	    if ! diff $OUT verify/test_$t.vfy ; then
		echo "#* ERROR in ${TEST_NAME}, test $t: info returned wrong data"
		echo "   (file test_$t.out vs. verify/test_$t.vfy)"
		rc=`expr $rc + 1`
	    else
		rm $OUT
	    fi
	fi
    fi
    
    t=`expr $t + 1`
done

if ! $PB input -d ${TEST_NAME}_inp.xml -u input_?.dat >>test.log 2>&1; then
    echo "#* ERROR in ${TEST_NAME}: could not import data. See test.log"
    exit 1
fi

test_files=("setup_MPI_version=1.23_platform=SX-6.gp" "setup_MPI_version_>_1.23_platform=SX-6.gp" "setup_MPI_version_>_1.23_platform=SX-8.gp")
CMD="$PB query -d ${TEST_NAME}_qry.xml"
if ! $CMD >>test.log 2>&1; then
    echo "#* ERROR in ${TEST_NAME}: could not perform query $t:"
    echo "   $CMD"
    echo "   (see file test.log)"
    rc=`expr $rc + 1`
else
    for (( f = 0 ; f < ${#test_files[@]} ; f++ )) ; do
	echo "  test "$t
	echo "  test "$t >>test.log
	if [ -n "$VERIFY" ] ; then
	    if ! diff ${test_files[$f]} verify/test_$t.vfy ; then
		echo "#* ERROR in ${TEST_NAME}, test $t: query returned wrong data"
		echo "   (file ${test_files[$f]} vs. verify/test_$t.vfy)"
		rc=`expr $rc + 1`
	    else
		rm ${test_files[$f]} 
	    fi
	else
	    mv ${test_files[$f]} verify/test_$t.vfy
	fi
	t=`expr $t + 1`
    done
fi

# check that an invalid update operation does not alter the experiment database
while [ $t -le 9 ] ; do
    echo "  test "$t
    echo "  test "$t >>test.log
    u=`expr $t - 3`
    CMD="$PB update ${TEST_NAME}_upd_${u}.xml"
    OUT=`echo $TEST_OUTPUT | sed s/@/$t/`
    if $CMD >>test.log 2>&1; then
	echo "#* ERROR in ${TEST_NAME}, test $t: update operation should have failed:"
	echo "   $CMD"
	echo "   (see file test.log)"
	rc=`expr $rc + 1`
    else
	if ! $PB info -e ${TEST_NAME}_TEST -v -i | grep -v Connecting | grep -v Created | grep -v Modified | grep -v admin_access > $OUT 2>>test.log; then
	    echo "#* ERROR in ${TEST_NAME}: could not perform test $t:"
	    echo "   $PB info -e ${TEST_NAME}_TEST -v -i > $OUT"
	    echo "   (see file test.log and test_$t.out)"
	    rc=`expr $rc + 1`
	else 
	    $PB info  -e ${TEST_NAME}_TEST -v --val= >>$OUT 2>>test.log
	    if [ -n "$VERIFY" ] ; then
		if ! diff $OUT verify/test_$t.vfy ; then
		    echo "#* ERROR in ${TEST_NAME}, test $t: info returned wrong data"
		    echo "   (file test_$t.out vs. verify/test_$t.vfy)"
		    rc=`expr $rc + 1`
		else
		    rm $OUT
		fi
	    fi
	fi
    fi
	
    t=`expr $t + 1`
done

sleep 2

if ! $PB delete -e ${TEST_NAME}_TEST --dontask >>test.log 2>&1; then
    echo "#* ERROR in ${TEST_NAME}: could not delete experiment. See test.log"
    exit 1
fi

if [ $rc = "0" ] ; then
    rm -f test.log *.eps
fi

echo "*** done with tests in '${TEST_NAME}' ($rc failed)"

exit $rc
